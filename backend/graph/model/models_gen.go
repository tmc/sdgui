// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents a dependency required by a program.
type Dependency struct {
	// Name of the dependency.
	Name string `json:"name"`
	// Brief description of the dependency.
	Description string `json:"description"`
	// Rationale or purpose for needing the dependency.
	Rationale string `json:"rationale"`
	// Map of symbols related to this dependency.
	Symbols []*SymbolMap `json:"symbols"`
}

// Represents a file in a program.
type File struct {
	// Path to the file.
	Path string `json:"path"`
	// Rationale or purpose of the file.
	Rationale string `json:"rationale"`
	// Current status of the file's generation process.
	GenerationStatus GenerationStatus `json:"generationStatus"`
	// Additional details about the generation status.
	GenerationStatusDetails *string `json:"generationStatusDetails,omitempty"`
	// Content of the file.
	Content string `json:"content"`
}

// Represents a chunk of generic completion text.
type GenericCompletionChunk struct {
	// The text content of the chunk.
	Text string `json:"text"`
	// Flag indicating if this is the last chunk.
	IsLast bool `json:"isLast"`
}

// Represents a program in the system.
type Program struct {
	// Unique identifier for the program.
	ID string `json:"id"`
	// Brief description of the program.
	Description string `json:"description"`
	// List of files associated with the program.
	Files []*File `json:"files,omitempty"`
	// Shared dependencies across files in the program.
	SharedDependencies []*Dependency `json:"sharedDependencies,omitempty"`
	// Current status of the program's generation process.
	GenerationStatus GenerationStatus `json:"generationStatus"`
	// Additional details about the generation status.
	GenerationStatusDetails *string `json:"generationStatusDetails,omitempty"`
}

// Input type for regenerating a program.
type RegenerateProgramInput struct {
	// New description for the program.
	NewDescription string `json:"newDescription"`
	// IDs of the files to be regenerated.
	FilesToRegenerate []string `json:"filesToRegenerate"`
}

// Represents a key-value mapping of symbols.
type SymbolMap struct {
	// Key of the symbol.
	Key string `json:"key"`
	// Value of the symbol.
	Value string `json:"value"`
}

// Enumeration of possible generation statuses.
type GenerationStatus string

const (
	GenerationStatusIdle     GenerationStatus = "IDLE"
	GenerationStatusPending  GenerationStatus = "PENDING"
	GenerationStatusRunning  GenerationStatus = "RUNNING"
	GenerationStatusFinished GenerationStatus = "FINISHED"
	GenerationStatusFailed   GenerationStatus = "FAILED"
)

var AllGenerationStatus = []GenerationStatus{
	GenerationStatusIdle,
	GenerationStatusPending,
	GenerationStatusRunning,
	GenerationStatusFinished,
	GenerationStatusFailed,
}

func (e GenerationStatus) IsValid() bool {
	switch e {
	case GenerationStatusIdle, GenerationStatusPending, GenerationStatusRunning, GenerationStatusFinished, GenerationStatusFailed:
		return true
	}
	return false
}

func (e GenerationStatus) String() string {
	return string(e)
}

func (e *GenerationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenerationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenerationStatus", str)
	}
	return nil
}

func (e GenerationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
