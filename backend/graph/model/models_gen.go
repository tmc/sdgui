// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Dependency struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Rationale   string       `json:"rationale"`
	Symbols     []*SymbolMap `json:"symbols"`
}

type File struct {
	Path             string           `json:"path"`
	Rationale        string           `json:"rationale"`
	GenerationStatus GenerationStatus `json:"generationStatus"`
	Content          string           `json:"content"`
}

type GenericCompletionChunk struct {
	Text   string `json:"text"`
	IsLast bool   `json:"isLast"`
}

type Program struct {
	ID                      string           `json:"id"`
	Description             string           `json:"description"`
	Files                   []*File          `json:"files,omitempty"`
	SharedDependencies      []*Dependency    `json:"sharedDependencies,omitempty"`
	GenerationStatus        GenerationStatus `json:"generationStatus"`
	GenerationStatusDetails *string          `json:"generationStatusDetails,omitempty"`
}

type RegenerateProgramInput struct {
	NewDescription    string   `json:"newDescription"`
	FilesToRegenerate []string `json:"filesToRegenerate"`
}

type SymbolMap struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type GenerationStatus string

const (
	GenerationStatusIdle     GenerationStatus = "IDLE"
	GenerationStatusPending  GenerationStatus = "PENDING"
	GenerationStatusRunning  GenerationStatus = "RUNNING"
	GenerationStatusFinished GenerationStatus = "FINISHED"
	GenerationStatusFailed   GenerationStatus = "FAILED"
)

var AllGenerationStatus = []GenerationStatus{
	GenerationStatusIdle,
	GenerationStatusPending,
	GenerationStatusRunning,
	GenerationStatusFinished,
	GenerationStatusFailed,
}

func (e GenerationStatus) IsValid() bool {
	switch e {
	case GenerationStatusIdle, GenerationStatusPending, GenerationStatusRunning, GenerationStatusFinished, GenerationStatusFailed:
		return true
	}
	return false
}

func (e GenerationStatus) String() string {
	return string(e)
}

func (e *GenerationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenerationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenerationStatus", str)
	}
	return nil
}

func (e GenerationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
