# Supervised Program Synthesis system.

type Query {
    programs: [Program!]!
}

type Mutation {
    createProgram(description: String!): Program!
    regenerateProgram(input: RegenerateProgramInput!): Program!
}

type Subscription {
    observeProgram(id: ID!): Program!
    testSubscription: String!
    genericCompletion(prompt: String!): GenericCompletionChunk
}

type GenericCompletionChunk {
  text: String!
  isLast: Boolean!
}

input RegenerateProgramInput {
    newDescription: String!
    filesToRegenerate: [ID!]!
}

type Program {
    id: ID!
    description: String!
    files: [File!]
    sharedDependencies: [Dependency!]
    generationStatus: GenerationStatus!
    generationStatusDetails: String
}

enum GenerationStatus {
    IDLE
    PENDING
    RUNNING
    FINISHED
    FAILED
}

type File {
    path: String!
    rationale: String!
    generationStatus: GenerationStatus!
    generationStatusDetails: String
    content: String!
}

type Dependency {
    name: String!
    description: String!
    rationale: String!
    symbols: [SymbolMap!]!
}

type SymbolMap {
  key: String!
  value: String!
}
